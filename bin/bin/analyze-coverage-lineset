#!/usr/bin/env python3
"""
Find the best lines of coverage to attack from a coverage report.

You can provide input as a file or to stdin. Use like so:
    coverage report | analyze-coverage-lineset
"""

import argparse
import functools
import re
import sys

DELIM_LINE_RE = re.compile(r"^\-+$")


def parse_line(line):
    fname = line.split()[0]
    data = line.split("%")[1].strip()
    if data == "":
        return []

    data = [x.strip() for x in data.split(",")]
    pairs = []
    for d in data:
        pair = d.split("-")
        if len(pair) == 2:
            pairs.append(pair)
        else:
            pairs.append((pair[0], pair[0]))
    return [(fname, int(x), int(y)) for x, y in pairs]


def inner_lines(fp):
    gotfirst = False
    while not gotfirst:
        line = next(fp)
        if DELIM_LINE_RE.match(line):
            gotfirst = True
    for line in fp:
        if not DELIM_LINE_RE.match(line):
            yield line
        else:
            return


def parse_all(fp):
    return functools.reduce(
        lambda x, y: x + parse_line(y) if y.strip() else [], inner_lines(fp), []
    )


def find_best(data, n):
    # list of triples: (diff, (start, end), filename)
    best_diffs = []

    for (fname, x, y) in data:
        diff = y - x
        if len(best_diffs) < n:
            best_diffs.append((diff, (x, y), fname))
            best_diffs.sort()
            continue
        min_tracked_diff = best_diffs[0][0]
        if diff > min_tracked_diff:
            best_diffs[0] = (diff, (x, y), fname)
            best_diffs.sort()
    return [(fname, start, end) for (diff, (start, end), fname) in best_diffs]


def main():
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "-n", type=int, default=1, help="Find the best 'n' diffs (default: 1)"
    )
    parser.add_argument(
        "INPUT_FILE",
        type=argparse.FileType("r"),
        help="File with coverage data to analyze, defaults to stdin",
        nargs="?",
    )
    args = parser.parse_args()
    if args.n < 1:
        parser.error("can't have -n less than 1")

    fp = args.INPUT_FILE if args.INPUT_FILE else sys.stdin
    data = parse_all(fp)
    print(f"Best line range{'' if args.n == 1 else 's'}:")
    for fname, start, end in find_best(data, args.n):
        print(f"  {fname}: {start} - {end}")


if __name__ == "__main__":
    main()
