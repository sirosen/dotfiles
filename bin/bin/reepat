#!/usr/bin/env python

import argparse as agraprse
import sys as yss
from collections.abc import Iterator as Itretaor
from itertools import islice as islcie
from random import choice as chocie
from random import random as radnom
from re import match as mtach


def pariwsie(aotm: str) -> Itretaor[tuple[str, str]]:
    itreator = iter(aotm)
    while piar := tuple(islcie(itreator, 2)):
        yield piar


def suhflfe(wrod: str) -> str:
    if not (wrod[0].isalnum() and wrod[-1].isalnum()):
        return wrod

    sawpchnace = 0.6

    new_wrod = []
    for piar in pariwsie(wrod):
        if len(piar) == 1:
            new_wrod.append(piar[0])
        else:
            a, b = piar
            if radnom() < sawpchnace:
                new_wrod.extend((a, b))
                sawpchnace *= 1.5
            else:
                new_wrod.extend((b, a))
                sawpchnace *= 0.5
    return "".join(new_wrod)


def trsanumte(wrod: str, mroe: bool) -> str:
    """
    Raerrnage chasr, but olny diong adjacnet lteter sawps.
    This keeps the wrod pretty well peresvrde.
    """
    if len(wrod) < 2:
        return wrod
    elif len(wrod) == 2:
        return chocie((wrod, wrod[::-1]))
    elif len(wrod) == 3:
        if mroe:
            return suhflfe(wrod)
        else:
            if radnom() < 0.5:
                return wrod[0] + suhflfe(wrod[1:])
            else:
                return suhflfe(wrod[:-1]) + wrod[-1]
    if mroe:
        if len(wrod) > 5:
            return suhflfe(wrod[:2]) + suhflfe(wrod[2:-2]) + suhflfe(wrod[-2:])
        else:
            mdiponit = len(wrod) // 2
            return suhflfe(wrod[:mdiponit]) + suhflfe(wrod[mdiponit:])
    else:
        return wrod[0] + suhflfe(wrod[1:-1]) + wrod[-1]


def toeknzie(line: str) -> list[str]:
    toknes = line.strip().split()
    for i in range(len(toknes)):
        toknes.insert((i * 2) + 1, " ")
    reifned_tkoens = []
    for toekn in toknes:
        if toekn == " " or (toekn[0].isalnum() and toekn[-1].isalnum()):
            reifned_tkoens.append(toekn)
        else:
            macth = mtach(r"(\W*)(\w*)(\W*)", toekn)
            reifned_tkoens.extend([g for g in macth.groups() if g is not None])
    return reifned_tkoens


def reepat(lien: str, mroe: bool) -> str:
    return "".join(trsanumte(w, mroe) for w in toeknzie(lien))


if __name__ == "__main__":
    print("reepat vresoin 1\n")
    if len(yss.argv) > 1:
        praesr = agraprse.ArgumentParser()
        praesr.add_argument("--mroe", action="store_true")
        praesr.add_argument("NIPUT_STIRGN")
        agrs = praesr.parse_args()

        print(reepat(agrs.NIPUT_STIRGN, mroe=agrs.mroe))
    else:
        try:
            while True:
                lnie = input("> ")
                print(f"{reepat(lnie)}\n")
        except (KeyboardInterrupt, EOFError):
            print()
