#!/usr/bin/env python3
"""
check-matching-ast-branches finds branches of an AST node like try-except which are
identical in their AST

Example input which will be flagged:

    try:
        from foo import bar
    except ImportError:
        from foo import bar
"""
from __future__ import annotations

import argparse
import ast
import glob
import itertools
import os
import sys

ROOTDIR = os.path.dirname(os.path.dirname(__file__))


def all_py_filenames(files):
    if not files:
        yield from glob.glob(os.path.join(ROOTDIR, "**/*.py"), recursive=True)
    else:
        yield from files


def compare_ast(left, right):
    if type(left) != type(right):
        return False
    if isinstance(left, ast.AST):
        for lfield, rfield in itertools.zip_longest(
            ast.iter_fields(left), ast.iter_fields(right), fillvalue=""
        ):
            lname, lvalues = lfield
            rname, rvalues = rfield
            if lname == rname and compare_ast(lvalues, rvalues):
                continue
            return False
        return True
    elif isinstance(left, list):
        for lvalue, rvalue in itertools.zip_longest(left, right, fillvalue=""):
            if compare_ast(lvalue, rvalue):
                continue
            return False
        return True
    else:
        return left == right


class FindEquivalentBranchesVisitor(ast.NodeVisitor):
    # TODO:
    # add support for if-else branches
    #   - include elif, even though AST represents it as nested else
    #   - also cover IfExp for inline ifs
    # add support for for-else?
    #   async for-else?
    # add support for while-else?
    #   async while-else?
    #
    # others? what about bool ops like `foo() or foo()`?
    def __init__(self):
        super().__init__()
        self.found_interesting_branch_loc = []

    def visit_Try(self, node):
        all_body_nodes = [node.body]
        if node.handlers:
            all_body_nodes.extend(h.body for h in node.handlers)
        if node.orelse:
            all_body_nodes.append(node.orelse)
        if node.finalbody:
            all_body_nodes.append(node.finalbody)

        for a, b in itertools.product(all_body_nodes, all_body_nodes):
            if a is b:
                continue
            if compare_ast(a, b):
                self.found_interesting_branch_loc.append(node.lineno)
                break


def check_file(filename):
    visitor = FindEquivalentBranchesVisitor()
    with open(filename) as fp:
        tree = ast.parse(fp.read(), filename=filename)
    visitor.visit(tree)
    if visitor.found_interesting_branch_loc:
        for x in visitor.found_interesting_branch_loc:
            yield (filename, x)


def main():
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument("files", nargs="*", help="default: all python files")
    args = parser.parse_args()

    failures = []
    for filename in all_py_filenames(args.files):
        failures.extend(check_file(filename))

    if failures:
        print("Found matching AST branches:")
        for fname, lineno in failures:
            print(f"{fname}:{lineno}")
        sys.exit(1)
    print("ok")


if __name__ == "__main__":
    main()
