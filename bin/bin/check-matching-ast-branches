#!/usr/bin/env python3
"""
check-matching-ast-branches finds branches of an AST node like try-except which are
identical in their AST

Example input which will be flagged:

    try:
        from foo import bar
    except ImportError:
        from foo import bar
"""
from __future__ import annotations

import argparse
import ast
import glob
import itertools
import os
import sys


def all_py_filenames(files):
    if not files:
        yield from glob.glob(os.path.join(os.getcwd(), "**/*.py"), recursive=True)
    else:
        yield from files


def compare_ast(left, right):
    if type(left) != type(right):
        return False
    if isinstance(left, ast.AST):
        for lfield, rfield in itertools.zip_longest(
            ast.iter_fields(left), ast.iter_fields(right)
        ):
            lname, lvalues = lfield
            rname, rvalues = rfield
            if lname == rname and compare_ast(lvalues, rvalues):
                continue
            return False
        return True
    elif isinstance(left, list):
        for lvalue, rvalue in itertools.zip_longest(left, right):
            if compare_ast(lvalue, rvalue):
                continue
            return False
        return True
    else:
        return left == right


def product_compare_ast(nodelist) -> bool:
    for index, item1 in enumerate(nodelist):
        for item2 in nodelist[index + 1 :]:
            if compare_ast(item1, item2):
                return True
    return False


class FindEquivalentBranchesVisitor(ast.NodeVisitor):
    # open questions:
    #
    # add support for for-else?
    #   async for-else?
    # add support for while-else?
    #   async while-else?
    #
    # others? what about bool ops like `foo() or foo()`?
    def __init__(self):
        super().__init__()
        self.found_interesting_branch_loc = []

    def visit_Try(self, node):
        all_body_nodes = [node.body]
        if node.handlers:
            all_body_nodes.extend(h.body for h in node.handlers)
        if node.orelse:
            all_body_nodes.append(node.orelse)
        if node.finalbody:
            all_body_nodes.append(node.finalbody)

        if product_compare_ast(all_body_nodes):
            self.found_interesting_branch_loc.append(node.lineno)
        else:
            self.generic_visit(node)

    def visit_IfExp(self, node):
        if product_compare_ast([node.body, node.orelse]):
            self.found_interesting_branch_loc.append(node.lineno)
        else:
            self.generic_visit(node)

    def visit_If(self, node):
        collected_branches = [node.body]

        current = node.orelse
        while len(current) == 1 and isinstance(current[0], ast.If):
            current = current[0]
            collected_branches.append(current.body)
            current = current.orelse
        collected_branches.append(current)
        terminal_else_branch = current  # rename for clarity below

        if product_compare_ast(collected_branches):
            self.found_interesting_branch_loc.append(node.lineno)
        else:
            self.generic_visit(node.test)
            for subnode in node.body:
                self.generic_visit(subnode)
            for subnode in terminal_else_branch:
                self.generic_visit(subnode)


def check_file(filename: str, ignore_invalid: bool = False):
    try:
        with open(filename) as fp:
            tree = ast.parse(fp.read(), filename=filename)
    except SyntaxError:
        if ignore_invalid:
            return
        raise

    visitor = FindEquivalentBranchesVisitor()
    visitor.visit(tree)
    if visitor.found_interesting_branch_loc:
        for x in visitor.found_interesting_branch_loc:
            yield (filename, x)


def main():
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument("files", nargs="*", help="default: all python files")
    parser.add_argument(
        "--ignore-invalid-python",
        default=False,
        action="store_true",
        help="Ignore files which cannot parse",
    )
    args = parser.parse_args()

    failures = []
    for filename in all_py_filenames(args.files):
        failures.extend(check_file(filename, args.ignore_invalid_python))

    if failures:
        cwd = os.getcwd()
        print("Found matching AST branches:")
        for fname, lineno in failures:
            if fname.startswith(cwd):
                fname = fname[len(cwd) + 1:]
            print(f"{fname}:{lineno}")
        sys.exit(1)
    print("ok")


if __name__ == "__main__":
    main()
